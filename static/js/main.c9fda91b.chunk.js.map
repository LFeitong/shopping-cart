{"version":3,"sources":["Item/Item.tsx","CartItem/CartItem.tsx","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Item","item","handleAddToCart","src","image","alt","title","description","price","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","toFixed","size","disableElevation","variant","id","Cart","items","cartItems","length","map","reduce","ack","Wrapper","styled","div","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","console","log","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9fda91b.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button';\nimport { CartItemType } from '../App';\n\ntype Props = {\n  item: CartItemType;\n  handleAddToCart: (clickedItem: CartItemType) => void;\n};\n\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => (\n  <div>\n    <img src={item.image} alt={item.title} />\n    <div>\n      <h3>{item.title}</h3>\n      <p>{item.description}</p>\n      <h3>${item.price}</h3>\n    </div>\n    <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>\n  </div>\n);\n\nexport default Item;","import Button from '@material-ui/core/Button';\nimport { CartItemType } from '../App';\n\ntype Props = {\n  item: CartItemType;\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => (\n  <div>\n    <div>\n      <h3>{item.title}</h3>\n      <div className='information'>\n        <p>Price: ${item.price}</p>\n        <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\n      </div>\n      <div className='buttons'>\n        <Button\n          size='small'\n          disableElevation\n          variant='contained'\n          onClick={() => removeFromCart(item.id)}\n        >\n          -\n        </Button>\n        <p>{item.amount}</p>\n        <Button\n          size='small'\n          disableElevation\n          variant='contained'\n          onClick={() => addToCart(item)}\n        >\n          +\n        </Button>\n      </div>\n    </div>\n    <img src={item.image} alt={item.title} />\n  </div>\n);\n\nexport default CartItem;","import CartItem from '../CartItem/CartItem';\nimport { CartItemType } from '../App';\n\ntype Props = {\n  cartItems: CartItemType[];\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\n  const calculateTotal = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount * item.price, 0);\n\n  return (\n    <div>\n      <h2>Your Shopping Cart</h2>\n      {cartItems.length === 0 ? <p>No items in cart.</p> : null}\n      {cartItems.map(item => (\n        <CartItem\n          key={item.id}\n          item={item}\n          addToCart={addToCart}\n          removeFromCart={removeFromCart}\n        />\n      ))}\n      <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2>\n    </div>\n  );\n};\n\nexport default Cart;","import styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const Wrapper = styled.div`\n  margin: 40px;\n`;\n\nexport const StyledButton = styled(IconButton)`\n  position: fixed;\n  z-index: 100;\n  right: 20px;\n  top: 20px;\n`;","import { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport Item from './Item/Item';\nimport Cart from './Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\nimport { Wrapper, StyledButton } from './App.styles';\n\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('https://fakestoreapi.com/products')).json();\n\nconst App = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\n    'products',\n    getProducts\n  );\n  console.log(data);\n\n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount, 0);\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems(prev => {\n      // 1. Is the item already added in the cart?\n      const isItemInCart = prev.find(item => item.id === clickedItem.id);\n\n      if (isItemInCart) {\n        return prev.map(item =>\n          item.id === clickedItem.id\n            ? { ...item, amount: item.amount + 1 }\n            : item\n        );\n      }\n      // First time the item is added\n      return [...prev, { ...clickedItem, amount: 1 }];\n    });\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems(prev =>\n      prev.reduce((ack, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) return ack;\n          return [...ack, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...ack, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong ...</div>;\n\n  return (\n    <Wrapper>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart\n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map(item => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={client}>\n    <App />\n  </QueryClientProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}